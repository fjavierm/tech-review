scalar Date

type User {
    id: ID!
    name: String!
    email: String!
    reservations: [Reservation!]!
}

type Book {
    id: ID!
    title: String!
    author: String!
    isbn: String!
    reservations: [Reservation!]!
}

type Reservation {
    id: ID!
    user: User!
    book: Book!
    reservationDate: Date!
    returnDate: Date
}

input UserInput {
    name: String!
    email: String!
}

input BookInput {
    title: String!
    author: String!
    isbn: String!
}

input ReservationInput {
    userId: ID!
    bookId: ID!
    reservationDate: Date!
    returnDate: Date
}

type Query {
    # User queries
    users: [User!]!
    user(id: ID!): User

    # Book queries
    books: [Book!]!
    book(id: ID!): Book

    # Reservation queries
    reservations: [Reservation!]!
    reservation(id: ID!): Reservation
}

type Mutation {
    # User mutations
    createUser(input: UserInput!): User!
    updateUser(id: ID!, input: UserInput!): User!
    deleteUser(id: ID!): Boolean!

    # Book mutations
    createBook(input: BookInput!): Book!
    updateBook(id: ID!, input: BookInput!): Book!
    deleteBook(id: ID!): Boolean!

    # Reservation mutations
    createReservation(input: ReservationInput!): Reservation!
    updateReservation(id: ID!, input: ReservationInput!): Reservation!
    deleteReservation(id: ID!): Boolean!
}